import { DataProvider } from 'ra-core';
import { ApolloClient, QueryOptions, OperationVariables, ApolloQueryResult, MutationOptions, WatchQueryOptions, ApolloClientOptions } from '@apollo/client';
import { IntrospectionSchema, IntrospectionType, IntrospectionObjectType } from 'graphql';

/**
 * @param {ApolloClient} client The Apollo client
 * @param {Object} options The introspection options
 */
declare const introspectSchema: (client: ApolloClient<unknown>, options: IntrospectionOptions) => Promise<any>;
declare type IntrospectionOptions = {
    schema?: IntrospectionSchema;
    operationNames: {
        [key: string]: (type: IntrospectionType) => string;
    };
    exclude?: string[] | ((type: IntrospectionType) => boolean);
    include?: string[] | ((type: IntrospectionType) => boolean);
};
declare type IntrospectedResource = {
    type: IntrospectionObjectType;
};
declare type IntrospectionResult = {
    types: IntrospectionType[];
    queries: IntrospectionObjectType[];
    resources: IntrospectedResource[];
    schema: IntrospectionSchema;
};
declare const isResourceIncluded: (type: IntrospectionType, { include }?: Partial<IntrospectionOptions>) => boolean;
declare const isResourceExcluded: (type: IntrospectionType, { exclude }?: Partial<IntrospectionOptions>) => boolean;

declare const QUERY_TYPES: string[];
declare const MUTATION_TYPES: string[];
declare const ALL_TYPES: string[];
declare type BuildQueryResult = QueryOptions<OperationVariables, any> & {
    parseResponse: (response: ApolloQueryResult<any>) => any;
};
declare type BuildQuery = (name: string, resource: string, params: any) => BuildQueryResult;
declare type BuildQueryFactory = (introspectionResults: IntrospectionResult) => BuildQuery;
declare type GetQueryOptions = (resource: string, raFetchMethod: string) => Partial<QueryOptions<OperationVariables, any>>;
declare type GetMutationOptions = (resource: string, raFetchMethod: string) => Partial<MutationOptions<OperationVariables, any>>;
declare type GetWatchQueryOptions = (resource: string, raFetchMethod: string) => Partial<WatchQueryOptions<OperationVariables, any>>;
declare type Options = {
    client?: ApolloClient<unknown>;
    clientOptions?: Partial<ApolloClientOptions<unknown>>;
    introspection?: false | Partial<IntrospectionOptions>;
    override?: {
        [key: string]: (params: any) => BuildQueryResult;
    };
    buildQuery: BuildQueryFactory;
    query?: GetQueryOptions;
    mutation?: GetMutationOptions;
    watchQuery?: GetWatchQueryOptions;
};
declare const _default: (options: Options) => Promise<DataProvider>;

export { ALL_TYPES, BuildQuery, BuildQueryFactory, BuildQueryResult, GetMutationOptions, GetQueryOptions, GetWatchQueryOptions, IntrospectedResource, IntrospectionOptions, IntrospectionResult, MUTATION_TYPES, Options, QUERY_TYPES, _default as default, introspectSchema, isResourceExcluded, isResourceIncluded };
